{{ $maxconn := "1024" -}}

global
	master-worker
	maxconn {{$maxconn}}
	log /dev/log local0
	stats socket /var/run/haproxy.sock mode 600 level admin

defaults
	log global
	mode http
	option httplog
	option dontlognull
	option forwardfor
	maxconn {{$maxconn}}
	timeout connect 5s
	timeout client 10s
	timeout server 10s

frontend http-80
	bind ipv4@:80
	bind ipv6@:80
	monitor-uri /ping
{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
	acl host_{{$host}} hdr_sub(host) -i {{$host}}
	use_backend backend_{{$host}} if host_{{$host}}
{{ end }}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}
backend backend_{{$host}}
	balance leastconn
	option httpchk GET /ping
	timeout check 500ms
	{{ range $index, $value := $containers }}
		{{ $addrLen := len $value.Addresses }}
		{{ $network := index $value.Networks 0 }}

		{{/* If only 1 port exposed, use that */}}
		{{ if eq $addrLen 1 }}
			{{ with $address := index $value.Addresses 0 }}
	server {{$value.Name}} {{$network.IP}}:{{$address.Port}} check inter 5s
			{{ end }}
		{{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
		{{ else if $value.Env.VIRTUAL_PORT }}
			{{ range $i, $address := $value.Addresses }}
				{{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
	server {{$value.Name}} {{$network.IP}}:{{$address.Port}} check inter 5s
				{{ end }}
			{{ end }}
		{{/* Else default to standard web port 80 */}}
		{{ else }}
			{{ range $i, $address := $value.Addresses }}
				{{ if eq $address.Port "80" }}
	server {{$value.Name}} {{$network.IP}}:{{$address.Port}} check inter 5s
				{{ end }}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
